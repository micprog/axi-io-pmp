// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`


`include "common_cells/assertions.svh"

module io_pmp_reg_top #(
    parameter type reg_req_t = logic,
    parameter type reg_rsp_t = logic,
    parameter int AW = 8
) (
    input clk_i,
    input rst_ni,
    input reg_req_t reg_req_i,
    output reg_rsp_t reg_rsp_o,
    // To HW
    output io_pmp_reg_pkg::io_pmp_reg2hw_t reg2hw,  // Write


    // Config
    input devmode_i  // If 1, explicit error return for unmapped register access
);

  import io_pmp_reg_pkg::*;

  localparam int DW = 64;
  localparam int DBW = DW / 8;  // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [ AW-1:0] reg_addr;
  logic [ DW-1:0] reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [ DW-1:0] reg_rdata;
  logic           reg_error;

  logic addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  // Below register interface can be changed
  reg_req_t reg_intf_req;
  reg_rsp_t reg_intf_rsp;


  assign reg_intf_req = reg_req_i;
  assign reg_rsp_o = reg_intf_rsp;


  assign reg_we = reg_intf_req.valid & reg_intf_req.write;
  assign reg_re = reg_intf_req.valid & ~reg_intf_req.write;
  assign reg_addr = reg_intf_req.addr;
  assign reg_wdata = reg_intf_req.wdata;
  assign reg_be = reg_intf_req.wstrb;
  assign reg_intf_rsp.rdata = reg_rdata;
  assign reg_intf_rsp.error = reg_error;
  assign reg_intf_rsp.ready = 1'b1;

  assign reg_rdata = reg_rdata_next;
  assign reg_error = (devmode_i & addrmiss) | wr_err;


  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic [53:0] pmp_addr_0_qs;
  logic [53:0] pmp_addr_0_wd;
  logic pmp_addr_0_we;
  logic [53:0] pmp_addr_1_qs;
  logic [53:0] pmp_addr_1_wd;
  logic pmp_addr_1_we;
  logic [53:0] pmp_addr_2_qs;
  logic [53:0] pmp_addr_2_wd;
  logic pmp_addr_2_we;
  logic [53:0] pmp_addr_3_qs;
  logic [53:0] pmp_addr_3_wd;
  logic pmp_addr_3_we;
  logic [53:0] pmp_addr_4_qs;
  logic [53:0] pmp_addr_4_wd;
  logic pmp_addr_4_we;
  logic [53:0] pmp_addr_5_qs;
  logic [53:0] pmp_addr_5_wd;
  logic pmp_addr_5_we;
  logic [53:0] pmp_addr_6_qs;
  logic [53:0] pmp_addr_6_wd;
  logic pmp_addr_6_we;
  logic [53:0] pmp_addr_7_qs;
  logic [53:0] pmp_addr_7_wd;
  logic pmp_addr_7_we;
  logic [53:0] pmp_addr_8_qs;
  logic [53:0] pmp_addr_8_wd;
  logic pmp_addr_8_we;
  logic [53:0] pmp_addr_9_qs;
  logic [53:0] pmp_addr_9_wd;
  logic pmp_addr_9_we;
  logic [53:0] pmp_addr_10_qs;
  logic [53:0] pmp_addr_10_wd;
  logic pmp_addr_10_we;
  logic [53:0] pmp_addr_11_qs;
  logic [53:0] pmp_addr_11_wd;
  logic pmp_addr_11_we;
  logic [53:0] pmp_addr_12_qs;
  logic [53:0] pmp_addr_12_wd;
  logic pmp_addr_12_we;
  logic [53:0] pmp_addr_13_qs;
  logic [53:0] pmp_addr_13_wd;
  logic pmp_addr_13_we;
  logic [53:0] pmp_addr_14_qs;
  logic [53:0] pmp_addr_14_wd;
  logic pmp_addr_14_we;
  logic [53:0] pmp_addr_15_qs;
  logic [53:0] pmp_addr_15_wd;
  logic pmp_addr_15_we;
  logic [7:0] pmp_cfg_0_pmp_cfg_0_qs;
  logic [7:0] pmp_cfg_0_pmp_cfg_0_wd;
  logic pmp_cfg_0_pmp_cfg_0_we;
  logic [7:0] pmp_cfg_0_pmp_cfg_1_qs;
  logic [7:0] pmp_cfg_0_pmp_cfg_1_wd;
  logic pmp_cfg_0_pmp_cfg_1_we;
  logic [7:0] pmp_cfg_0_pmp_cfg_2_qs;
  logic [7:0] pmp_cfg_0_pmp_cfg_2_wd;
  logic pmp_cfg_0_pmp_cfg_2_we;
  logic [7:0] pmp_cfg_0_pmp_cfg_3_qs;
  logic [7:0] pmp_cfg_0_pmp_cfg_3_wd;
  logic pmp_cfg_0_pmp_cfg_3_we;
  logic [7:0] pmp_cfg_0_pmp_cfg_4_qs;
  logic [7:0] pmp_cfg_0_pmp_cfg_4_wd;
  logic pmp_cfg_0_pmp_cfg_4_we;
  logic [7:0] pmp_cfg_0_pmp_cfg_5_qs;
  logic [7:0] pmp_cfg_0_pmp_cfg_5_wd;
  logic pmp_cfg_0_pmp_cfg_5_we;
  logic [7:0] pmp_cfg_0_pmp_cfg_6_qs;
  logic [7:0] pmp_cfg_0_pmp_cfg_6_wd;
  logic pmp_cfg_0_pmp_cfg_6_we;
  logic [7:0] pmp_cfg_0_pmp_cfg_7_qs;
  logic [7:0] pmp_cfg_0_pmp_cfg_7_wd;
  logic pmp_cfg_0_pmp_cfg_7_we;
  logic [7:0] pmp_cfg_1_pmp_cfg_8_qs;
  logic [7:0] pmp_cfg_1_pmp_cfg_8_wd;
  logic pmp_cfg_1_pmp_cfg_8_we;
  logic [7:0] pmp_cfg_1_pmp_cfg_9_qs;
  logic [7:0] pmp_cfg_1_pmp_cfg_9_wd;
  logic pmp_cfg_1_pmp_cfg_9_we;
  logic [7:0] pmp_cfg_1_pmp_cfg_10_qs;
  logic [7:0] pmp_cfg_1_pmp_cfg_10_wd;
  logic pmp_cfg_1_pmp_cfg_10_we;
  logic [7:0] pmp_cfg_1_pmp_cfg_11_qs;
  logic [7:0] pmp_cfg_1_pmp_cfg_11_wd;
  logic pmp_cfg_1_pmp_cfg_11_we;
  logic [7:0] pmp_cfg_1_pmp_cfg_12_qs;
  logic [7:0] pmp_cfg_1_pmp_cfg_12_wd;
  logic pmp_cfg_1_pmp_cfg_12_we;
  logic [7:0] pmp_cfg_1_pmp_cfg_13_qs;
  logic [7:0] pmp_cfg_1_pmp_cfg_13_wd;
  logic pmp_cfg_1_pmp_cfg_13_we;
  logic [7:0] pmp_cfg_1_pmp_cfg_14_qs;
  logic [7:0] pmp_cfg_1_pmp_cfg_14_wd;
  logic pmp_cfg_1_pmp_cfg_14_we;
  logic [7:0] pmp_cfg_1_pmp_cfg_15_qs;
  logic [7:0] pmp_cfg_1_pmp_cfg_15_wd;
  logic pmp_cfg_1_pmp_cfg_15_we;

  // Register instances

  // Subregister 0 of Multireg pmp_addr
  // R[pmp_addr_0]: V(False)

  prim_subreg #(
      .DW      (54),
      .SWACCESS("RW"),
      .RESVAL  (54'h0)
  ) u_pmp_addr_0 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pmp_addr_0_we),
      .wd(pmp_addr_0_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pmp_addr[0].q),

      // to register interface (read)
      .qs(pmp_addr_0_qs)
  );

  // Subregister 1 of Multireg pmp_addr
  // R[pmp_addr_1]: V(False)

  prim_subreg #(
      .DW      (54),
      .SWACCESS("RW"),
      .RESVAL  (54'h0)
  ) u_pmp_addr_1 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pmp_addr_1_we),
      .wd(pmp_addr_1_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pmp_addr[1].q),

      // to register interface (read)
      .qs(pmp_addr_1_qs)
  );

  // Subregister 2 of Multireg pmp_addr
  // R[pmp_addr_2]: V(False)

  prim_subreg #(
      .DW      (54),
      .SWACCESS("RW"),
      .RESVAL  (54'h0)
  ) u_pmp_addr_2 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pmp_addr_2_we),
      .wd(pmp_addr_2_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pmp_addr[2].q),

      // to register interface (read)
      .qs(pmp_addr_2_qs)
  );

  // Subregister 3 of Multireg pmp_addr
  // R[pmp_addr_3]: V(False)

  prim_subreg #(
      .DW      (54),
      .SWACCESS("RW"),
      .RESVAL  (54'h0)
  ) u_pmp_addr_3 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pmp_addr_3_we),
      .wd(pmp_addr_3_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pmp_addr[3].q),

      // to register interface (read)
      .qs(pmp_addr_3_qs)
  );

  // Subregister 4 of Multireg pmp_addr
  // R[pmp_addr_4]: V(False)

  prim_subreg #(
      .DW      (54),
      .SWACCESS("RW"),
      .RESVAL  (54'h0)
  ) u_pmp_addr_4 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pmp_addr_4_we),
      .wd(pmp_addr_4_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pmp_addr[4].q),

      // to register interface (read)
      .qs(pmp_addr_4_qs)
  );

  // Subregister 5 of Multireg pmp_addr
  // R[pmp_addr_5]: V(False)

  prim_subreg #(
      .DW      (54),
      .SWACCESS("RW"),
      .RESVAL  (54'h0)
  ) u_pmp_addr_5 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pmp_addr_5_we),
      .wd(pmp_addr_5_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pmp_addr[5].q),

      // to register interface (read)
      .qs(pmp_addr_5_qs)
  );

  // Subregister 6 of Multireg pmp_addr
  // R[pmp_addr_6]: V(False)

  prim_subreg #(
      .DW      (54),
      .SWACCESS("RW"),
      .RESVAL  (54'h0)
  ) u_pmp_addr_6 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pmp_addr_6_we),
      .wd(pmp_addr_6_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pmp_addr[6].q),

      // to register interface (read)
      .qs(pmp_addr_6_qs)
  );

  // Subregister 7 of Multireg pmp_addr
  // R[pmp_addr_7]: V(False)

  prim_subreg #(
      .DW      (54),
      .SWACCESS("RW"),
      .RESVAL  (54'h0)
  ) u_pmp_addr_7 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pmp_addr_7_we),
      .wd(pmp_addr_7_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pmp_addr[7].q),

      // to register interface (read)
      .qs(pmp_addr_7_qs)
  );

  // Subregister 8 of Multireg pmp_addr
  // R[pmp_addr_8]: V(False)

  prim_subreg #(
      .DW      (54),
      .SWACCESS("RW"),
      .RESVAL  (54'h0)
  ) u_pmp_addr_8 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pmp_addr_8_we),
      .wd(pmp_addr_8_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pmp_addr[8].q),

      // to register interface (read)
      .qs(pmp_addr_8_qs)
  );

  // Subregister 9 of Multireg pmp_addr
  // R[pmp_addr_9]: V(False)

  prim_subreg #(
      .DW      (54),
      .SWACCESS("RW"),
      .RESVAL  (54'h0)
  ) u_pmp_addr_9 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pmp_addr_9_we),
      .wd(pmp_addr_9_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pmp_addr[9].q),

      // to register interface (read)
      .qs(pmp_addr_9_qs)
  );

  // Subregister 10 of Multireg pmp_addr
  // R[pmp_addr_10]: V(False)

  prim_subreg #(
      .DW      (54),
      .SWACCESS("RW"),
      .RESVAL  (54'h0)
  ) u_pmp_addr_10 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pmp_addr_10_we),
      .wd(pmp_addr_10_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pmp_addr[10].q),

      // to register interface (read)
      .qs(pmp_addr_10_qs)
  );

  // Subregister 11 of Multireg pmp_addr
  // R[pmp_addr_11]: V(False)

  prim_subreg #(
      .DW      (54),
      .SWACCESS("RW"),
      .RESVAL  (54'h0)
  ) u_pmp_addr_11 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pmp_addr_11_we),
      .wd(pmp_addr_11_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pmp_addr[11].q),

      // to register interface (read)
      .qs(pmp_addr_11_qs)
  );

  // Subregister 12 of Multireg pmp_addr
  // R[pmp_addr_12]: V(False)

  prim_subreg #(
      .DW      (54),
      .SWACCESS("RW"),
      .RESVAL  (54'h0)
  ) u_pmp_addr_12 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pmp_addr_12_we),
      .wd(pmp_addr_12_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pmp_addr[12].q),

      // to register interface (read)
      .qs(pmp_addr_12_qs)
  );

  // Subregister 13 of Multireg pmp_addr
  // R[pmp_addr_13]: V(False)

  prim_subreg #(
      .DW      (54),
      .SWACCESS("RW"),
      .RESVAL  (54'h0)
  ) u_pmp_addr_13 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pmp_addr_13_we),
      .wd(pmp_addr_13_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pmp_addr[13].q),

      // to register interface (read)
      .qs(pmp_addr_13_qs)
  );

  // Subregister 14 of Multireg pmp_addr
  // R[pmp_addr_14]: V(False)

  prim_subreg #(
      .DW      (54),
      .SWACCESS("RW"),
      .RESVAL  (54'h0)
  ) u_pmp_addr_14 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pmp_addr_14_we),
      .wd(pmp_addr_14_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pmp_addr[14].q),

      // to register interface (read)
      .qs(pmp_addr_14_qs)
  );

  // Subregister 15 of Multireg pmp_addr
  // R[pmp_addr_15]: V(False)

  prim_subreg #(
      .DW      (54),
      .SWACCESS("RW"),
      .RESVAL  (54'h0)
  ) u_pmp_addr_15 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pmp_addr_15_we),
      .wd(pmp_addr_15_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pmp_addr[15].q),

      // to register interface (read)
      .qs(pmp_addr_15_qs)
  );



  // Subregister 0 of Multireg pmp_cfg
  // R[pmp_cfg_0]: V(False)

  // F[pmp_cfg_0]: 7:0
  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_pmp_cfg_0_pmp_cfg_0 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pmp_cfg_0_pmp_cfg_0_we),
      .wd(pmp_cfg_0_pmp_cfg_0_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pmp_cfg[0].q),

      // to register interface (read)
      .qs(pmp_cfg_0_pmp_cfg_0_qs)
  );


  // F[pmp_cfg_1]: 15:8
  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_pmp_cfg_0_pmp_cfg_1 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pmp_cfg_0_pmp_cfg_1_we),
      .wd(pmp_cfg_0_pmp_cfg_1_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pmp_cfg[1].q),

      // to register interface (read)
      .qs(pmp_cfg_0_pmp_cfg_1_qs)
  );


  // F[pmp_cfg_2]: 23:16
  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_pmp_cfg_0_pmp_cfg_2 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pmp_cfg_0_pmp_cfg_2_we),
      .wd(pmp_cfg_0_pmp_cfg_2_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pmp_cfg[2].q),

      // to register interface (read)
      .qs(pmp_cfg_0_pmp_cfg_2_qs)
  );


  // F[pmp_cfg_3]: 31:24
  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_pmp_cfg_0_pmp_cfg_3 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pmp_cfg_0_pmp_cfg_3_we),
      .wd(pmp_cfg_0_pmp_cfg_3_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pmp_cfg[3].q),

      // to register interface (read)
      .qs(pmp_cfg_0_pmp_cfg_3_qs)
  );


  // F[pmp_cfg_4]: 39:32
  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_pmp_cfg_0_pmp_cfg_4 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pmp_cfg_0_pmp_cfg_4_we),
      .wd(pmp_cfg_0_pmp_cfg_4_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pmp_cfg[4].q),

      // to register interface (read)
      .qs(pmp_cfg_0_pmp_cfg_4_qs)
  );


  // F[pmp_cfg_5]: 47:40
  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_pmp_cfg_0_pmp_cfg_5 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pmp_cfg_0_pmp_cfg_5_we),
      .wd(pmp_cfg_0_pmp_cfg_5_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pmp_cfg[5].q),

      // to register interface (read)
      .qs(pmp_cfg_0_pmp_cfg_5_qs)
  );


  // F[pmp_cfg_6]: 55:48
  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_pmp_cfg_0_pmp_cfg_6 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pmp_cfg_0_pmp_cfg_6_we),
      .wd(pmp_cfg_0_pmp_cfg_6_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pmp_cfg[6].q),

      // to register interface (read)
      .qs(pmp_cfg_0_pmp_cfg_6_qs)
  );


  // F[pmp_cfg_7]: 63:56
  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_pmp_cfg_0_pmp_cfg_7 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pmp_cfg_0_pmp_cfg_7_we),
      .wd(pmp_cfg_0_pmp_cfg_7_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pmp_cfg[7].q),

      // to register interface (read)
      .qs(pmp_cfg_0_pmp_cfg_7_qs)
  );


  // Subregister 8 of Multireg pmp_cfg
  // R[pmp_cfg_1]: V(False)

  // F[pmp_cfg_8]: 7:0
  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_pmp_cfg_1_pmp_cfg_8 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pmp_cfg_1_pmp_cfg_8_we),
      .wd(pmp_cfg_1_pmp_cfg_8_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pmp_cfg[8].q),

      // to register interface (read)
      .qs(pmp_cfg_1_pmp_cfg_8_qs)
  );


  // F[pmp_cfg_9]: 15:8
  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_pmp_cfg_1_pmp_cfg_9 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pmp_cfg_1_pmp_cfg_9_we),
      .wd(pmp_cfg_1_pmp_cfg_9_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pmp_cfg[9].q),

      // to register interface (read)
      .qs(pmp_cfg_1_pmp_cfg_9_qs)
  );


  // F[pmp_cfg_10]: 23:16
  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_pmp_cfg_1_pmp_cfg_10 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pmp_cfg_1_pmp_cfg_10_we),
      .wd(pmp_cfg_1_pmp_cfg_10_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pmp_cfg[10].q),

      // to register interface (read)
      .qs(pmp_cfg_1_pmp_cfg_10_qs)
  );


  // F[pmp_cfg_11]: 31:24
  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_pmp_cfg_1_pmp_cfg_11 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pmp_cfg_1_pmp_cfg_11_we),
      .wd(pmp_cfg_1_pmp_cfg_11_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pmp_cfg[11].q),

      // to register interface (read)
      .qs(pmp_cfg_1_pmp_cfg_11_qs)
  );


  // F[pmp_cfg_12]: 39:32
  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_pmp_cfg_1_pmp_cfg_12 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pmp_cfg_1_pmp_cfg_12_we),
      .wd(pmp_cfg_1_pmp_cfg_12_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pmp_cfg[12].q),

      // to register interface (read)
      .qs(pmp_cfg_1_pmp_cfg_12_qs)
  );


  // F[pmp_cfg_13]: 47:40
  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_pmp_cfg_1_pmp_cfg_13 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pmp_cfg_1_pmp_cfg_13_we),
      .wd(pmp_cfg_1_pmp_cfg_13_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pmp_cfg[13].q),

      // to register interface (read)
      .qs(pmp_cfg_1_pmp_cfg_13_qs)
  );


  // F[pmp_cfg_14]: 55:48
  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_pmp_cfg_1_pmp_cfg_14 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pmp_cfg_1_pmp_cfg_14_we),
      .wd(pmp_cfg_1_pmp_cfg_14_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pmp_cfg[14].q),

      // to register interface (read)
      .qs(pmp_cfg_1_pmp_cfg_14_qs)
  );


  // F[pmp_cfg_15]: 63:56
  prim_subreg #(
      .DW      (8),
      .SWACCESS("RW"),
      .RESVAL  (8'h0)
  ) u_pmp_cfg_1_pmp_cfg_15 (
      .clk_i (clk_i),
      .rst_ni(rst_ni),

      // from register interface
      .we(pmp_cfg_1_pmp_cfg_15_we),
      .wd(pmp_cfg_1_pmp_cfg_15_wd),

      // from internal hardware
      .de(1'b0),
      .d ('0),

      // to internal hardware
      .qe(),
      .q (reg2hw.pmp_cfg[15].q),

      // to register interface (read)
      .qs(pmp_cfg_1_pmp_cfg_15_qs)
  );





  logic [17:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[0] = (reg_addr == IO_PMP_PMP_ADDR_0_OFFSET);
    addr_hit[1] = (reg_addr == IO_PMP_PMP_ADDR_1_OFFSET);
    addr_hit[2] = (reg_addr == IO_PMP_PMP_ADDR_2_OFFSET);
    addr_hit[3] = (reg_addr == IO_PMP_PMP_ADDR_3_OFFSET);
    addr_hit[4] = (reg_addr == IO_PMP_PMP_ADDR_4_OFFSET);
    addr_hit[5] = (reg_addr == IO_PMP_PMP_ADDR_5_OFFSET);
    addr_hit[6] = (reg_addr == IO_PMP_PMP_ADDR_6_OFFSET);
    addr_hit[7] = (reg_addr == IO_PMP_PMP_ADDR_7_OFFSET);
    addr_hit[8] = (reg_addr == IO_PMP_PMP_ADDR_8_OFFSET);
    addr_hit[9] = (reg_addr == IO_PMP_PMP_ADDR_9_OFFSET);
    addr_hit[10] = (reg_addr == IO_PMP_PMP_ADDR_10_OFFSET);
    addr_hit[11] = (reg_addr == IO_PMP_PMP_ADDR_11_OFFSET);
    addr_hit[12] = (reg_addr == IO_PMP_PMP_ADDR_12_OFFSET);
    addr_hit[13] = (reg_addr == IO_PMP_PMP_ADDR_13_OFFSET);
    addr_hit[14] = (reg_addr == IO_PMP_PMP_ADDR_14_OFFSET);
    addr_hit[15] = (reg_addr == IO_PMP_PMP_ADDR_15_OFFSET);
    addr_hit[16] = (reg_addr == IO_PMP_PMP_CFG_0_OFFSET);
    addr_hit[17] = (reg_addr == IO_PMP_PMP_CFG_1_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = (reg_we &
              ((addr_hit[ 0] & (|(IO_PMP_PERMIT[ 0] & ~reg_be))) |
               (addr_hit[ 1] & (|(IO_PMP_PERMIT[ 1] & ~reg_be))) |
               (addr_hit[ 2] & (|(IO_PMP_PERMIT[ 2] & ~reg_be))) |
               (addr_hit[ 3] & (|(IO_PMP_PERMIT[ 3] & ~reg_be))) |
               (addr_hit[ 4] & (|(IO_PMP_PERMIT[ 4] & ~reg_be))) |
               (addr_hit[ 5] & (|(IO_PMP_PERMIT[ 5] & ~reg_be))) |
               (addr_hit[ 6] & (|(IO_PMP_PERMIT[ 6] & ~reg_be))) |
               (addr_hit[ 7] & (|(IO_PMP_PERMIT[ 7] & ~reg_be))) |
               (addr_hit[ 8] & (|(IO_PMP_PERMIT[ 8] & ~reg_be))) |
               (addr_hit[ 9] & (|(IO_PMP_PERMIT[ 9] & ~reg_be))) |
               (addr_hit[10] & (|(IO_PMP_PERMIT[10] & ~reg_be))) |
               (addr_hit[11] & (|(IO_PMP_PERMIT[11] & ~reg_be))) |
               (addr_hit[12] & (|(IO_PMP_PERMIT[12] & ~reg_be))) |
               (addr_hit[13] & (|(IO_PMP_PERMIT[13] & ~reg_be))) |
               (addr_hit[14] & (|(IO_PMP_PERMIT[14] & ~reg_be))) |
               (addr_hit[15] & (|(IO_PMP_PERMIT[15] & ~reg_be))) |
               (addr_hit[16] & (|(IO_PMP_PERMIT[16] & ~reg_be))) |
               (addr_hit[17] & (|(IO_PMP_PERMIT[17] & ~reg_be)))));
  end

  assign pmp_addr_0_we = addr_hit[0] & reg_we & !reg_error;
  assign pmp_addr_0_wd = reg_wdata[53:0];

  assign pmp_addr_1_we = addr_hit[1] & reg_we & !reg_error;
  assign pmp_addr_1_wd = reg_wdata[53:0];

  assign pmp_addr_2_we = addr_hit[2] & reg_we & !reg_error;
  assign pmp_addr_2_wd = reg_wdata[53:0];

  assign pmp_addr_3_we = addr_hit[3] & reg_we & !reg_error;
  assign pmp_addr_3_wd = reg_wdata[53:0];

  assign pmp_addr_4_we = addr_hit[4] & reg_we & !reg_error;
  assign pmp_addr_4_wd = reg_wdata[53:0];

  assign pmp_addr_5_we = addr_hit[5] & reg_we & !reg_error;
  assign pmp_addr_5_wd = reg_wdata[53:0];

  assign pmp_addr_6_we = addr_hit[6] & reg_we & !reg_error;
  assign pmp_addr_6_wd = reg_wdata[53:0];

  assign pmp_addr_7_we = addr_hit[7] & reg_we & !reg_error;
  assign pmp_addr_7_wd = reg_wdata[53:0];

  assign pmp_addr_8_we = addr_hit[8] & reg_we & !reg_error;
  assign pmp_addr_8_wd = reg_wdata[53:0];

  assign pmp_addr_9_we = addr_hit[9] & reg_we & !reg_error;
  assign pmp_addr_9_wd = reg_wdata[53:0];

  assign pmp_addr_10_we = addr_hit[10] & reg_we & !reg_error;
  assign pmp_addr_10_wd = reg_wdata[53:0];

  assign pmp_addr_11_we = addr_hit[11] & reg_we & !reg_error;
  assign pmp_addr_11_wd = reg_wdata[53:0];

  assign pmp_addr_12_we = addr_hit[12] & reg_we & !reg_error;
  assign pmp_addr_12_wd = reg_wdata[53:0];

  assign pmp_addr_13_we = addr_hit[13] & reg_we & !reg_error;
  assign pmp_addr_13_wd = reg_wdata[53:0];

  assign pmp_addr_14_we = addr_hit[14] & reg_we & !reg_error;
  assign pmp_addr_14_wd = reg_wdata[53:0];

  assign pmp_addr_15_we = addr_hit[15] & reg_we & !reg_error;
  assign pmp_addr_15_wd = reg_wdata[53:0];

  assign pmp_cfg_0_pmp_cfg_0_we = addr_hit[16] & reg_we & !reg_error;
  assign pmp_cfg_0_pmp_cfg_0_wd = reg_wdata[7:0];

  assign pmp_cfg_0_pmp_cfg_1_we = addr_hit[16] & reg_we & !reg_error;
  assign pmp_cfg_0_pmp_cfg_1_wd = reg_wdata[15:8];

  assign pmp_cfg_0_pmp_cfg_2_we = addr_hit[16] & reg_we & !reg_error;
  assign pmp_cfg_0_pmp_cfg_2_wd = reg_wdata[23:16];

  assign pmp_cfg_0_pmp_cfg_3_we = addr_hit[16] & reg_we & !reg_error;
  assign pmp_cfg_0_pmp_cfg_3_wd = reg_wdata[31:24];

  assign pmp_cfg_0_pmp_cfg_4_we = addr_hit[16] & reg_we & !reg_error;
  assign pmp_cfg_0_pmp_cfg_4_wd = reg_wdata[39:32];

  assign pmp_cfg_0_pmp_cfg_5_we = addr_hit[16] & reg_we & !reg_error;
  assign pmp_cfg_0_pmp_cfg_5_wd = reg_wdata[47:40];

  assign pmp_cfg_0_pmp_cfg_6_we = addr_hit[16] & reg_we & !reg_error;
  assign pmp_cfg_0_pmp_cfg_6_wd = reg_wdata[55:48];

  assign pmp_cfg_0_pmp_cfg_7_we = addr_hit[16] & reg_we & !reg_error;
  assign pmp_cfg_0_pmp_cfg_7_wd = reg_wdata[63:56];

  assign pmp_cfg_1_pmp_cfg_8_we = addr_hit[17] & reg_we & !reg_error;
  assign pmp_cfg_1_pmp_cfg_8_wd = reg_wdata[7:0];

  assign pmp_cfg_1_pmp_cfg_9_we = addr_hit[17] & reg_we & !reg_error;
  assign pmp_cfg_1_pmp_cfg_9_wd = reg_wdata[15:8];

  assign pmp_cfg_1_pmp_cfg_10_we = addr_hit[17] & reg_we & !reg_error;
  assign pmp_cfg_1_pmp_cfg_10_wd = reg_wdata[23:16];

  assign pmp_cfg_1_pmp_cfg_11_we = addr_hit[17] & reg_we & !reg_error;
  assign pmp_cfg_1_pmp_cfg_11_wd = reg_wdata[31:24];

  assign pmp_cfg_1_pmp_cfg_12_we = addr_hit[17] & reg_we & !reg_error;
  assign pmp_cfg_1_pmp_cfg_12_wd = reg_wdata[39:32];

  assign pmp_cfg_1_pmp_cfg_13_we = addr_hit[17] & reg_we & !reg_error;
  assign pmp_cfg_1_pmp_cfg_13_wd = reg_wdata[47:40];

  assign pmp_cfg_1_pmp_cfg_14_we = addr_hit[17] & reg_we & !reg_error;
  assign pmp_cfg_1_pmp_cfg_14_wd = reg_wdata[55:48];

  assign pmp_cfg_1_pmp_cfg_15_we = addr_hit[17] & reg_we & !reg_error;
  assign pmp_cfg_1_pmp_cfg_15_wd = reg_wdata[63:56];

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[53:0] = pmp_addr_0_qs;
      end

      addr_hit[1]: begin
        reg_rdata_next[53:0] = pmp_addr_1_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[53:0] = pmp_addr_2_qs;
      end

      addr_hit[3]: begin
        reg_rdata_next[53:0] = pmp_addr_3_qs;
      end

      addr_hit[4]: begin
        reg_rdata_next[53:0] = pmp_addr_4_qs;
      end

      addr_hit[5]: begin
        reg_rdata_next[53:0] = pmp_addr_5_qs;
      end

      addr_hit[6]: begin
        reg_rdata_next[53:0] = pmp_addr_6_qs;
      end

      addr_hit[7]: begin
        reg_rdata_next[53:0] = pmp_addr_7_qs;
      end

      addr_hit[8]: begin
        reg_rdata_next[53:0] = pmp_addr_8_qs;
      end

      addr_hit[9]: begin
        reg_rdata_next[53:0] = pmp_addr_9_qs;
      end

      addr_hit[10]: begin
        reg_rdata_next[53:0] = pmp_addr_10_qs;
      end

      addr_hit[11]: begin
        reg_rdata_next[53:0] = pmp_addr_11_qs;
      end

      addr_hit[12]: begin
        reg_rdata_next[53:0] = pmp_addr_12_qs;
      end

      addr_hit[13]: begin
        reg_rdata_next[53:0] = pmp_addr_13_qs;
      end

      addr_hit[14]: begin
        reg_rdata_next[53:0] = pmp_addr_14_qs;
      end

      addr_hit[15]: begin
        reg_rdata_next[53:0] = pmp_addr_15_qs;
      end

      addr_hit[16]: begin
        reg_rdata_next[7:0]   = pmp_cfg_0_pmp_cfg_0_qs;
        reg_rdata_next[15:8]  = pmp_cfg_0_pmp_cfg_1_qs;
        reg_rdata_next[23:16] = pmp_cfg_0_pmp_cfg_2_qs;
        reg_rdata_next[31:24] = pmp_cfg_0_pmp_cfg_3_qs;
        reg_rdata_next[39:32] = pmp_cfg_0_pmp_cfg_4_qs;
        reg_rdata_next[47:40] = pmp_cfg_0_pmp_cfg_5_qs;
        reg_rdata_next[55:48] = pmp_cfg_0_pmp_cfg_6_qs;
        reg_rdata_next[63:56] = pmp_cfg_0_pmp_cfg_7_qs;
      end

      addr_hit[17]: begin
        reg_rdata_next[7:0]   = pmp_cfg_1_pmp_cfg_8_qs;
        reg_rdata_next[15:8]  = pmp_cfg_1_pmp_cfg_9_qs;
        reg_rdata_next[23:16] = pmp_cfg_1_pmp_cfg_10_qs;
        reg_rdata_next[31:24] = pmp_cfg_1_pmp_cfg_11_qs;
        reg_rdata_next[39:32] = pmp_cfg_1_pmp_cfg_12_qs;
        reg_rdata_next[47:40] = pmp_cfg_1_pmp_cfg_13_qs;
        reg_rdata_next[55:48] = pmp_cfg_1_pmp_cfg_14_qs;
        reg_rdata_next[63:56] = pmp_cfg_1_pmp_cfg_15_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Unused signal tieoff

  // wdata / byte enable are not always fully used
  // add a blanket unused statement to handle lint waivers
  logic unused_wdata;
  logic unused_be;
  assign unused_wdata = ^reg_wdata;
  assign unused_be = ^reg_be;

  // Assertions for Register Interface
  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))

endmodule
